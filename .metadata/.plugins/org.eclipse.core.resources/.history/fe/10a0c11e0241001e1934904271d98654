package com.jsp.AirLine.Service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jsp.AirLine.DTO.AirLine_Info_DTO;
import com.jsp.AirLine.DTO.FareDTO;
import com.jsp.AirLine.DTO.FlightDTO;
import com.jsp.AirLine.DTO.Flight_Info_DTO;
import com.jsp.AirLine.DTO.InventoryDTO;
import com.jsp.AirLine.Entity.AirlLine_Info;
import com.jsp.AirLine.Entity.Fare;
import com.jsp.AirLine.Entity.Flight;
import com.jsp.AirLine.Entity.Flight_Info;
import com.jsp.AirLine.Entity.Inventory;
import com.jsp.AirLine.Repository.AirLineInfoRepository;
import com.jsp.AirLine.Repository.FareRepository;
import com.jsp.AirLine.Repository.FlightInfoRepository;
import com.jsp.AirLine.Repository.FlightRepository;
import com.jsp.AirLine.Repository.InventoryRepository;

@Service
public class AdmineServiceImp implements AdminService{
  
	
	@Autowired
private AirLineInfoRepository airLineInfoRepo;
@Override
public int addAirlineinfo(AirLine_Info_DTO airlinedto) {
	AirlLine_Info airlLine_Info = airLineInfoRepo.save(AirlLine_Info.builder()
			.airLineName(airlinedto.getAirlineName())
			.build());
			
	return airlLine_Info.getAirLineId();
}

@Autowired
private FareRepository fareRepository;
@Override
public int addfair(FareDTO fairdto) {
	Fare fare =fareRepository.save(Fare.builder()
			.currency(fairdto.getCurrency())
			.amount(fairdto.getAmount())
			.build());
	return fare.getFareId();
}

@Autowired
private InventoryRepository inventoryRepo;
@Override
public int addinventatory(InventoryDTO inventatorydto) {
	Inventory inventory = inventoryRepo.save(Inventory.builder()
			
			         .count(inventatorydto.getCount())
			.build());
	System.out.println(inventory);
	return inventory.getInventoryId();
}

@Autowired
private FlightInfoRepository flightInfoRepo;
@Override
public int addflightinfo(Flight_Info_DTO flightinfodto, int airlineid) {
	   AirlLine_Info airlLine_Info =airLineInfoRepo.findById(airlineid).get();
	       Flight_Info flight_Info = flightInfoRepo.save(Flight_Info.builder()
	    		                     .flightNo(flightinfodto.getFlightNo())
	    		                     .type(flightinfodto.getType())
	    		                     .airlLine_Info(airlLine_Info)
	    		                     .build());
	      return flightInfoRepo.save(flight_Info).getFlightInfoId();
	         
}
 
@Autowired
  private FlightRepository flightRepo;

@Override
public int addflight(FlightDTO flightColumndto, int fairid, int flightinfoid, int inventatoryid) {
	Fare fare =fareRepository.findById(fairid).get();
	Flight_Info flight_Info = flightInfoRepo.findById(flightinfoid).get();
	Inventory inventory = inventoryRepo.findById(inventatoryid).get();
	Flight flight = Flight.builder()
			.distination(flightColumndto.getDistination())
			.flightDate(flightColumndto.getFlightDate())
			.flightTime(flightColumndto.getFlightTime())
			.currentLocation(flightColumndto.getCurrentLocation())
			.fare(fare)
			.flight_Info(flight_Info)
			.inventory(inventory)
			.build();
	return flightRepo.save(flight).getFlightId();
}

@Override
public FlightDTO findFlightByid(int flightid) {
	
	Optional<Flight> optional=flightRepo.findById(flightid);
	if(optional.isPresent())
	{
		Flight flight=optional.get();
		Fare fair=flight.getFare();
		Flight_Info flightinfo=flight.getFlight_Info();
		AirlLine_Info airLineinfo=flightinfo.getAirlLine_Info();
		Inventory inventatory=flight.getInventory();
		FlightDTO flightdto=FlightDTO.builder()
				.flightNo(flight.getFlightNo())
				.flightTime(flight.getFlightTime())
				.flightDate(flight.getFlightDate())
				.currentLocation(flight.getCurrentLocation())
				.distination(flight.getDistination())
				.fareDTO(FareDTO.builder().amount(fair.getAmount()).build())
				.flight_Info_DTO(Flight_Info_DTO.builder()
						.flightNo(flight.getFlightNo())
						.type(flightinfo.getType())
						.airLine_Info_DTO(AirLine_Info_DTO.builder()
								.airlineName(airLineinfo.getAirLineName())					
								.build())
						.build())
				.inventoryDTO(InventoryDTO.builder()
						.count(inventatory.getCount())
						.build())
				.build();
		return flightdto;
	}
	else
	{
		return null;
	}
}

@Override
public AirLine_Info_DTO findAirlineByid(int airlineid) {
	
	Optional<AirlLine_Info> optional=airLineInfoRepo.findById(airlineid);
	if(optional.isPresent())
	{
		AirlLine_Info airLineinfo=optional.get();
		AirLine_Info_DTO airLineinfodto=AirLine_Info_DTO.builder()
				.airlineName(airLineinfo.getAirLineName())
				.flight_Info_dto(airLineinfo.getFlight_Info().stream().map(t->Flight_Info_DTO.builder()
						.flightNo(t.getFlightNo())
						.type(t.getType())
						
						.build()).toList())
				.build();
		return airLineinfodto;
	}
	else
	{
		return null;
	}

}

@Override
public AirLine_Info_DTO updateAirlineNameByid(int airlineid, String airlinename) {
	
	return null;
}

@Override
public FlightDTO updateFlightNameByid(int flighid, int flightno) {
	// TODO Auto-generated method stub
	return null;
}

@Override
public int deleteFlights(int flightid) {
	// TODO Auto-generated method stub
	return 0;
}

@Override
public int deleteAirline(int airlineid) {
	// TODO Auto-generated method stub
	return 0;
}

@Override
public List<Flight> searchFlight(String currentLoc, String destination, String flightdate, String flighttime) {
	// TODO Auto-generated method stub
	return null;
}

	
}
